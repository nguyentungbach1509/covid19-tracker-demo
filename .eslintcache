[{"C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\App.js":"1","C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\MyApp.js":"2","C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\InfoBox.js":"3","C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\Table.js":"4","C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\reportWebVitals.js":"5","C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\LineGrap.js":"6","C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\index.js":"7","C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\util.js":"8","C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\Map.js":"9"},{"size":188,"mtime":1606233563710,"results":"10","hashOfConfig":"11"},{"size":5446,"mtime":1606930094281,"results":"12","hashOfConfig":"11"},{"size":1208,"mtime":1606759754166,"results":"13","hashOfConfig":"11"},{"size":744,"mtime":1606497982567,"results":"14","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"11"},{"size":3797,"mtime":1606758828250,"results":"16","hashOfConfig":"11"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"11"},{"size":2406,"mtime":1606928470825,"results":"18","hashOfConfig":"11"},{"size":1089,"mtime":1607008296296,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"uupoeg",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\App.js",[],["47","48"],"C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\MyApp.js",["49"],"import React, {Component} from 'react';\r\nimport './MyApp.css';\r\nimport { MenuItem, FormControl, Select, Card, CardContent} from '@material-ui/core';\r\nimport InfoBox from './InfoBox';\r\nimport Map from './Map';\r\nimport Table from './Table';\r\nimport {sortData} from './util';\r\nimport LineGrap from './LineGrap';\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport numeral from 'numeral';\r\n\r\nclass MyApp extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            countries: [],\r\n            country: \"worldwide\",\r\n            countryInfo: {},\r\n            tableData: [],\r\n            mapCenter: [\r\n                51.505,\r\n                -0.09\r\n            ],\r\n            mapZoom: 3,\r\n            mapCountries: [],\r\n            casesType: \"cases\"\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        fetch('https://disease.sh/v3/covid-19/countries')\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n            const countries = data.map((country) => ({\r\n                name: country.country,\r\n                value: country.countryInfo.iso2\r\n            }));\r\n\r\n            this.setState({\r\n                countries: countries,\r\n                tableData: sortData(data),\r\n                mapCountries: data\r\n            })\r\n        })\r\n\r\n        fetch('https://disease.sh/v3/covid-19/all')\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            this.setState({\r\n                countryInfo: data\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    onCountryChange = (event) => {\r\n        const countryCode = event.target.value\r\n\r\n        const url = countryCode === \"worldwide\" ? \r\n        \"https://disease.sh/v3/covid-19/all\" : \r\n        `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n\r\n\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n            this.setState({\r\n                country: countryCode,\r\n                countryInfo: data,\r\n                mapCenter: [data.countryInfo.lat, data.countryInfo.long],\r\n                mapZoom: 4\r\n            })\r\n        })\r\n    }\r\n\r\n    changeStat = (stat) => {\r\n        if(stat) {\r\n            return \"+\" + numeral(stat).format(\"0.0a\");\r\n        }\r\n        else {\r\n            return \"+0\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"app\">\r\n                <div className=\"app__left\">\r\n                    <div className=\"app__header\">\r\n                        <h1>COVID-19 TRACKER</h1>\r\n                        <FormControl variant=\"outlined\"  className=\"app__dropdown\">\r\n                            <Select native value={this.state.country} onChange={this.onCountryChange.bind(this)}>\r\n                                <option value=\"worldwide\">Worldwide</option>\r\n                                {this.state.countries.map((country, i) => (\r\n                                    <option key={i} value={country.value}>{country.name}</option>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </div>\r\n\r\n                    <div className=\"app__stats\">\r\n                        <InfoBox \r\n                            active={this.state.casesType === \"cases\"}\r\n                            casesType={this.state.casesType}\r\n                            onClick={(event) => this.setState({casesType:\"cases\"})}\r\n                            title=\"Coronavirus Cases\"\r\n                            cases={this.changeStat(this.state.countryInfo.todayCases)} \r\n                            total={this.changeStat(this.state.countryInfo.cases)}\r\n                        />\r\n                        <InfoBox \r\n                            active={this.state.casesType === \"deaths\"}\r\n                            casesType={this.state.casesType}\r\n                            onClick={(event) => this.setState({casesType:\"deaths\"})}\r\n                            title=\"Deaths\"\r\n                            cases={this.changeStat(this.state.countryInfo.todayDeaths)} \r\n                            total={this.changeStat(this.state.countryInfo.deaths)}\r\n                        />\r\n                        <InfoBox\r\n                            active={this.state.casesType === \"recovered\"}\r\n                            casesType={this.state.casesType}\r\n                            onClick={(event) => this.setState({casesType:\"recovered\"})} \r\n                            title=\"Recovered\"\r\n                            cases={this.changeStat(this.state.countryInfo.todayRecovered)} \r\n                            total={this.changeStat(this.state.countryInfo.recovered)}\r\n                        />\r\n                    </div>\r\n\r\n                    <Map casesType={this.state.casesType} center={this.state.mapCenter} zoom={this.state.mapZoom} countries={this.state.mapCountries}/>\r\n\r\n                </div>\r\n\r\n                <Card className=\"app__right\">\r\n                    <CardContent>\r\n                        <h3>Live Cases by countries</h3>\r\n                        \r\n                        <Table countries={this.state.tableData}/>\r\n                        \r\n                        <h3>Worldwide new {this.state.casesType}</h3>\r\n                        <LineGrap casesType={this.state.casesType}/>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default MyApp;","C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\InfoBox.js",["50","51"],"import React, {Component} from 'react';\r\nimport './InfoBox.css';\r\nimport { Card, CardContent, Typography} from '@material-ui/core';\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#ea4310\",\r\n        \r\n    },\r\n\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        \r\n    },\r\n\r\n    deaths: {\r\n        hex: \"#cc1034\",\r\n        \r\n    }\r\n}\r\n\r\nclass InfoBox extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <Card onClick={this.props.onClick} className={`inforbox ${this.props.active && `inforboxSelected__${this.props.casesType}`}`}>\r\n                <CardContent className=\"inforbox__content\">\r\n                    <Typography  className=\"inforbox__title\" color=\"textSecondary\">{this.props.title}</Typography>\r\n\r\n                    <h2 className={`inforbox__cases ${(this.props.title !== \"Cases\") && `${this.props.title}`}`}>{this.props.cases}</h2>\r\n\r\n\r\n                    <Typography className=\"inforbox__total\" color=\"textSecondary\">\r\n                        Total: {this.props.total}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default InfoBox;",["52","53"],"C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\Table.js",["54","55","56","57"],"import React, {Component} from 'react';\r\nimport './Table.css';\r\nimport { Card, CardContent, Typography} from '@material-ui/core';\r\nimport numeral from 'numeral';\r\n\r\n\r\nclass Table extends Component {\r\n\r\n    constructor(props){\r\n\r\n        super(props);\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"table\">\r\n                {this.props.countries.map((country, i) => (\r\n                    <tr key={i}>\r\n                        <td>{country.country}</td>\r\n                        <td>\r\n                            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Table;","C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\reportWebVitals.js",[],["58","59"],"C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\LineGrap.js",["60","61","62"],"import React, {Component} from 'react';\r\nimport './LineGrap.css';\r\nimport { Card, CardContent, Typography} from '@material-ui/core';\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\n//https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n\r\n        },\r\n    },\r\n\r\n    maintainAspectRatio: false,\r\n\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\"\r\n                }\r\n            }\r\n        ],\r\n\r\n        yAxes: [{\r\n            gridLine: {\r\n                display: false,\r\n            },\r\n\r\n            ticks: {\r\n                callbacks: function(value, index, values) {\r\n                    return numeral(value).format(\"0a\");\r\n                }\r\n            }\r\n        }]\r\n    },\r\n\r\n\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function(tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n}\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#ea4310\",\r\n        backGround: \"rgba(236, 122, 84, 0.5)\",\r\n        \r\n    },\r\n\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        backGround: \"rgba(142, 206, 136, 0.5)\",\r\n        \r\n    },\r\n\r\n    deaths: {\r\n        hex: \"#cc1034\",\r\n        backGround: \"rgba(224, 129, 143, 0.5)\",\r\n        \r\n    }\r\n}\r\n\r\n\r\nclass LineGrap extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: {},\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n           const chartData = this.buildChart(data, this.props.casesType);\r\n           this.setState({\r\n               data: chartData\r\n           })\r\n        })\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(prevProps.casesType !== this.props.casesType){\r\n            fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n               const chartData = this.buildChart(data, this.props.casesType);\r\n               this.setState({\r\n                   data: chartData\r\n               })\r\n            }) \r\n        }\r\n       \r\n    }\r\n\r\n\r\n\r\n    buildChart(data, casesType) {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n        console.log(casesType)\r\n        for(let date in data.cases) {\r\n            if(lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint\r\n                }\r\n\r\n                chartData.push(newDataPoint);\r\n            }\r\n\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n\r\n        \r\n        return chartData;\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.state.data?.length > 0 && (\r\n                    <Line \r\n                        options={options}\r\n                        data = {{\r\n                            datasets: [{\r\n                                backgroundColor: casesTypeColors[this.props.casesType].backGround,\r\n                                borderColor: casesTypeColors[this.props.casesType].hex,\r\n                                data: this.state.data\r\n                            }]\r\n                        }}\r\n                    />\r\n                )}\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default LineGrap;",["63","64"],"C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\index.js",[],["65","66"],"C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\util.js",["67"],"C:\\Learning\\Front End Web Programming - COMP-10244-02\\SummerPractice\\covidtracker\\my-app\\src\\Map.js",["68","69","70","71","72","73"],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":3,"column":10,"nodeType":"80","messageId":"81","endLine":3,"endColumn":18},{"ruleId":"78","severity":1,"message":"82","line":5,"column":7,"nodeType":"80","messageId":"81","endLine":5,"endColumn":22},{"ruleId":"83","severity":1,"message":"84","line":24,"column":5,"nodeType":"85","messageId":"86","endLine":27,"endColumn":6},{"ruleId":"74","replacedBy":"87"},{"ruleId":"76","replacedBy":"88"},{"ruleId":"78","severity":1,"message":"89","line":3,"column":10,"nodeType":"80","messageId":"81","endLine":3,"endColumn":14},{"ruleId":"78","severity":1,"message":"90","line":3,"column":16,"nodeType":"80","messageId":"81","endLine":3,"endColumn":27},{"ruleId":"78","severity":1,"message":"91","line":3,"column":29,"nodeType":"80","messageId":"81","endLine":3,"endColumn":39},{"ruleId":"83","severity":1,"message":"84","line":9,"column":5,"nodeType":"85","messageId":"86","endLine":13,"endColumn":6},{"ruleId":"74","replacedBy":"92"},{"ruleId":"76","replacedBy":"93"},{"ruleId":"78","severity":1,"message":"89","line":3,"column":10,"nodeType":"80","messageId":"81","endLine":3,"endColumn":14},{"ruleId":"78","severity":1,"message":"90","line":3,"column":16,"nodeType":"80","messageId":"81","endLine":3,"endColumn":27},{"ruleId":"78","severity":1,"message":"91","line":3,"column":29,"nodeType":"80","messageId":"81","endLine":3,"endColumn":39},{"ruleId":"74","replacedBy":"94"},{"ruleId":"76","replacedBy":"95"},{"ruleId":"74","replacedBy":"96"},{"ruleId":"76","replacedBy":"97"},{"ruleId":"78","severity":1,"message":"98","line":1,"column":8,"nodeType":"80","messageId":"81","endLine":1,"endColumn":13},{"ruleId":"78","severity":1,"message":"89","line":3,"column":10,"nodeType":"80","messageId":"81","endLine":3,"endColumn":14},{"ruleId":"78","severity":1,"message":"90","line":3,"column":16,"nodeType":"80","messageId":"81","endLine":3,"endColumn":27},{"ruleId":"78","severity":1,"message":"91","line":3,"column":29,"nodeType":"80","messageId":"81","endLine":3,"endColumn":39},{"ruleId":"78","severity":1,"message":"99","line":4,"column":9,"nodeType":"80","messageId":"81","endLine":4,"endColumn":21},{"ruleId":"78","severity":1,"message":"100","line":4,"column":23,"nodeType":"80","messageId":"81","endLine":4,"endColumn":32},{"ruleId":"83","severity":1,"message":"84","line":10,"column":5,"nodeType":"85","messageId":"86","endLine":12,"endColumn":6},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'MenuItem' is defined but never used.","Identifier","unusedVar","'casesTypeColors' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["101"],["102"],"'Card' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.",["101"],["102"],["101"],["102"],["101"],["102"],"'React' is defined but never used.","'MapContainer' is defined but never used.","'TileLayer' is defined but never used.","no-global-assign","no-unsafe-negation"]